/* The following code was generated by JFlex 1.6.0 */

package edu.unitec.matrox;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/Edilson Gonzalez/Documents/NetBeansProjects/MatroxCompiler/src/edu/unitec/matrox/MatroxLexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRINGFOUND = 2;
  public static final int CHARFOUND = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\6\1\7\1\7\1\5\22\0\1\7\1\0\1\11"+
    "\1\10\1\1\3\0\1\47\1\50\1\45\1\43\1\42\1\44\1\4"+
    "\1\46\12\2\2\0\1\55\1\54\1\53\2\0\32\3\1\51\1\12"+
    "\1\52\1\0\1\36\1\0\1\23\1\24\1\21\1\37\1\17\1\32"+
    "\1\20\1\22\1\16\1\3\1\41\1\26\1\30\1\13\1\25\1\34"+
    "\1\3\1\15\1\31\1\14\1\27\1\40\1\33\1\3\1\35\1\3"+
    "\12\0\1\7\32\0\1\7\u15df\0\1\7\u097f\0\13\7\35\0\1\7"+
    "\1\7\5\0\1\7\57\0\1\7\u0fa0\0\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\2\2\5"+
    "\1\2\1\6\1\7\16\3\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\1\1\24\1\2\1\25\1\24\1\0\1\26\1\0"+
    "\1\5\4\3\1\27\10\3\1\30\11\3\1\31\1\32"+
    "\1\33\1\34\1\0\1\35\3\3\1\36\4\3\1\37"+
    "\7\3\1\40\5\3\1\41\1\3\1\42\7\3\1\43"+
    "\5\3\1\44\13\3\1\45\1\3\1\46\1\47\1\50"+
    "\1\3\1\51\5\3\1\52\1\53\1\54\1\3\1\55"+
    "\3\3\1\56\6\3\1\57\1\60\1\61\1\62\1\3"+
    "\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\212\0\u0170\0\212\0\212\0\u019e\0\u01cc\0\u01fa\0\u0228"+
    "\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398"+
    "\0\u03c6\0\u03f4\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\212\0\212\0\212\0\u0422\0\212\0\u0450\0\u047e\0\212"+
    "\0\u04ac\0\212\0\u04da\0\u0114\0\u0114\0\u0170\0\u0170\0\u0508"+
    "\0\u0536\0\u0564\0\u0592\0\270\0\u05c0\0\u05ee\0\u061c\0\u064a"+
    "\0\u0678\0\u06a6\0\u06d4\0\u0702\0\270\0\u0730\0\u075e\0\u078c"+
    "\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\212\0\212"+
    "\0\212\0\212\0\u04ac\0\270\0\u08ce\0\u08fc\0\u092a\0\270"+
    "\0\u0958\0\u0986\0\u09b4\0\u09e2\0\270\0\u0a10\0\u0a3e\0\u0a6c"+
    "\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\270\0\u0b52\0\u0b80\0\u0bae"+
    "\0\u0bdc\0\u0c0a\0\270\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0"+
    "\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\270\0\u0dd6\0\u0e04\0\u0e32"+
    "\0\u0e60\0\u0e8e\0\270\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\270\0\u10b6"+
    "\0\270\0\270\0\270\0\u10e4\0\270\0\u1112\0\u1140\0\u116e"+
    "\0\u119c\0\u11ca\0\270\0\270\0\270\0\u11f8\0\270\0\u1226"+
    "\0\u1254\0\u1282\0\270\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368"+
    "\0\u1396\0\270\0\270\0\270\0\270\0\u13c4\0\270";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\5\1\7\1\10\2\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\5\1\17\1\20\1\21"+
    "\1\22\1\5\1\23\1\24\1\25\3\5\1\26\1\27"+
    "\1\30\1\31\3\5\1\32\1\5\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\11\47\1\50\1\51\43\47\12\52\1\53\43\52"+
    "\60\0\2\5\7\0\27\5\16\0\1\6\1\0\1\54"+
    "\53\0\1\55\61\0\1\11\47\0\10\56\1\57\45\56"+
    "\2\0\2\5\7\0\12\5\1\60\1\5\1\61\12\5"+
    "\16\0\2\5\7\0\2\5\1\62\24\5\16\0\2\5"+
    "\7\0\1\63\16\5\1\64\7\5\16\0\2\5\7\0"+
    "\1\65\12\5\1\66\13\5\16\0\2\5\7\0\3\5"+
    "\1\67\1\70\22\5\16\0\2\5\7\0\7\5\1\71"+
    "\17\5\16\0\2\5\7\0\1\72\26\5\16\0\2\5"+
    "\7\0\12\5\1\73\7\5\1\74\4\5\16\0\2\5"+
    "\7\0\2\5\1\75\16\5\1\76\5\5\16\0\2\5"+
    "\7\0\1\5\1\77\16\5\1\100\6\5\16\0\2\5"+
    "\7\0\10\5\1\101\1\5\1\102\1\5\1\103\12\5"+
    "\16\0\2\5\7\0\7\5\1\104\17\5\16\0\2\5"+
    "\7\0\2\5\1\105\24\5\16\0\2\5\7\0\12\5"+
    "\1\106\14\5\70\0\1\107\45\0\1\110\6\0\1\111"+
    "\1\112\1\0\11\47\1\0\1\113\43\47\11\0\5\47"+
    "\52\0\4\52\42\0\2\5\7\0\1\5\1\114\25\5"+
    "\16\0\2\5\7\0\15\5\1\115\11\5\16\0\2\5"+
    "\7\0\14\5\1\116\12\5\16\0\2\5\7\0\1\5"+
    "\1\117\25\5\16\0\2\5\7\0\24\5\1\120\2\5"+
    "\16\0\2\5\7\0\16\5\1\121\10\5\16\0\2\5"+
    "\7\0\25\5\1\122\1\5\16\0\2\5\7\0\1\5"+
    "\1\123\25\5\16\0\2\5\7\0\10\5\1\124\16\5"+
    "\16\0\2\5\7\0\24\5\1\125\2\5\16\0\2\5"+
    "\7\0\12\5\1\126\14\5\16\0\2\5\7\0\23\5"+
    "\1\127\3\5\16\0\2\5\7\0\1\5\1\130\25\5"+
    "\16\0\2\5\7\0\2\5\1\131\7\5\1\132\14\5"+
    "\16\0\2\5\7\0\3\5\1\133\23\5\16\0\2\5"+
    "\7\0\13\5\1\134\13\5\16\0\2\5\7\0\2\5"+
    "\1\135\24\5\16\0\2\5\7\0\1\136\26\5\16\0"+
    "\2\5\7\0\3\5\1\137\23\5\16\0\2\5\7\0"+
    "\3\5\1\140\23\5\16\0\2\5\7\0\3\5\1\141"+
    "\23\5\16\0\2\5\7\0\11\5\1\142\15\5\16\0"+
    "\2\5\7\0\4\5\1\143\22\5\16\0\2\5\7\0"+
    "\4\5\1\144\22\5\16\0\2\5\7\0\4\5\1\145"+
    "\22\5\16\0\2\5\7\0\4\5\1\146\22\5\16\0"+
    "\2\5\7\0\23\5\1\147\3\5\16\0\2\5\7\0"+
    "\2\5\1\150\24\5\16\0\2\5\7\0\13\5\1\151"+
    "\13\5\16\0\2\5\7\0\24\5\1\152\2\5\16\0"+
    "\2\5\7\0\3\5\1\153\23\5\16\0\2\5\7\0"+
    "\3\5\1\154\23\5\16\0\2\5\7\0\21\5\1\155"+
    "\5\5\16\0\2\5\7\0\1\5\1\156\25\5\16\0"+
    "\2\5\7\0\16\5\1\157\10\5\16\0\2\5\7\0"+
    "\6\5\1\160\20\5\16\0\2\5\7\0\13\5\1\161"+
    "\13\5\16\0\2\5\7\0\1\162\26\5\16\0\2\5"+
    "\7\0\24\5\1\163\2\5\16\0\2\5\7\0\4\5"+
    "\1\164\22\5\16\0\2\5\7\0\5\5\1\165\21\5"+
    "\16\0\2\5\7\0\3\5\1\166\23\5\16\0\2\5"+
    "\7\0\23\5\1\167\3\5\16\0\2\5\7\0\25\5"+
    "\1\170\1\5\16\0\2\5\7\0\10\5\1\171\16\5"+
    "\16\0\2\5\7\0\4\5\1\172\22\5\16\0\2\5"+
    "\7\0\4\5\1\173\22\5\16\0\2\5\7\0\12\5"+
    "\1\174\14\5\16\0\2\5\7\0\1\175\26\5\16\0"+
    "\2\5\7\0\6\5\1\176\20\5\16\0\2\5\7\0"+
    "\4\5\1\177\22\5\16\0\2\5\7\0\1\5\1\200"+
    "\25\5\16\0\2\5\7\0\4\5\1\201\22\5\16\0"+
    "\2\5\7\0\1\5\1\202\25\5\16\0\2\5\7\0"+
    "\2\5\1\203\24\5\16\0\2\5\7\0\4\5\1\204"+
    "\22\5\16\0\2\5\7\0\17\5\1\205\7\5\16\0"+
    "\2\5\7\0\11\5\1\206\15\5\16\0\2\5\7\0"+
    "\10\5\1\207\16\5\16\0\2\5\7\0\6\5\1\210"+
    "\20\5\16\0\2\5\7\0\10\5\1\211\16\5\16\0"+
    "\2\5\7\0\17\5\1\212\7\5\16\0\2\5\7\0"+
    "\1\213\26\5\16\0\2\5\7\0\5\5\1\214\21\5"+
    "\16\0\2\5\7\0\7\5\1\215\17\5\16\0\2\5"+
    "\7\0\3\5\1\216\23\5\16\0\2\5\7\0\2\5"+
    "\1\217\24\5\16\0\2\5\7\0\10\5\1\220\16\5"+
    "\16\0\2\5\7\0\13\5\1\221\13\5\16\0\2\5"+
    "\7\0\1\5\1\222\25\5\16\0\2\5\7\0\1\223"+
    "\26\5\16\0\2\5\7\0\10\5\1\224\16\5\16\0"+
    "\2\5\7\0\12\5\1\225\14\5\16\0\2\5\7\0"+
    "\6\5\1\226\20\5\16\0\2\5\7\0\14\5\1\227"+
    "\12\5\16\0\2\5\7\0\4\5\1\230\22\5\16\0"+
    "\2\5\7\0\14\5\1\231\12\5\16\0\2\5\7\0"+
    "\1\232\26\5\16\0\2\5\7\0\26\5\1\233\16\0"+
    "\2\5\7\0\4\5\1\234\22\5\16\0\2\5\7\0"+
    "\2\5\1\235\24\5\16\0\2\5\7\0\13\5\1\236"+
    "\13\5\16\0\2\5\7\0\1\5\1\237\25\5\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5106];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\11\4\1\1\11\1\1\2\11"+
    "\16\1\11\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\30\1\4\11\1\0\124\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return symbol(sym.STRINGCONTENT, yytext());
          }
        case 52: break;
        case 2: 
          { System.err.println("Illegal character <" + yytext() + "> at line: " + (yyline + 1) + " column: " + (yycolumn + 1));
          }
        case 53: break;
        case 3: 
          { return symbol(sym.IDENTIFIER, yytext());
          }
        case 54: break;
        case 4: 
          { return symbol(sym.INTNUMBER, new Integer(Integer.parseInt(yytext())));
          }
        case 55: break;
        case 5: 
          { /* ignore */
          }
        case 56: break;
        case 6: 
          { yybegin(STRINGFOUND);
          }
        case 57: break;
        case 7: 
          { yybegin(CHARFOUND);
          }
        case 58: break;
        case 8: 
          { return symbol(sym.COMMA);
          }
        case 59: break;
        case 9: 
          { return symbol(sym.ADD);
          }
        case 60: break;
        case 10: 
          { return symbol(sym.MIN);
          }
        case 61: break;
        case 11: 
          { return symbol(sym.MUL);
          }
        case 62: break;
        case 12: 
          { return symbol(sym.DIV);
          }
        case 63: break;
        case 13: 
          { return symbol(sym.LPAR);
          }
        case 64: break;
        case 14: 
          { return symbol(sym.RPAR);
          }
        case 65: break;
        case 15: 
          { return symbol(sym.LBRACK);
          }
        case 66: break;
        case 16: 
          { return symbol(sym.RBRACK);
          }
        case 67: break;
        case 17: 
          { return symbol(sym.GREATER);
          }
        case 68: break;
        case 18: 
          { return symbol(sym.EQU);
          }
        case 69: break;
        case 19: 
          { return symbol(sym.LESS);
          }
        case 70: break;
        case 20: 
          { yybegin(YYINITIAL);
          }
        case 71: break;
        case 21: 
          { return symbol(sym.CHARCONTENT, new Character(yytext().charAt(0)));
          }
        case 72: break;
        case 22: 
          { return symbol(sym.DOUBLENUMBER, new Double(Double.parseDouble(yytext())));
          }
        case 73: break;
        case 23: 
          { return symbol(sym.IF);
          }
        case 74: break;
        case 24: 
          { return symbol(sym.OR);
          }
        case 75: break;
        case 25: 
          { return symbol(sym.GREATEREQ);
          }
        case 76: break;
        case 26: 
          { return symbol(sym.ASSIGN);
          }
        case 77: break;
        case 27: 
          { return symbol(sym.NEQ);
          }
        case 78: break;
        case 28: 
          { return symbol(sym.LESSEQ);
          }
        case 79: break;
        case 29: 
          { return symbol(sym.NOT);
          }
        case 80: break;
        case 30: 
          { return symbol(sym.END);
          }
        case 81: break;
        case 31: 
          { return symbol(sym.AND);
          }
        case 82: break;
        case 32: 
          { return symbol(sym.FOR);
          }
        case 83: break;
        case 33: 
          { return symbol(sym.TRUE);
          }
        case 84: break;
        case 34: 
          { return symbol(sym.ELSE);
          }
        case 85: break;
        case 35: 
          { return symbol(sym.BREAK);
          }
        case 86: break;
        case 36: 
          { return symbol(sym.VOID);
          }
        case 87: break;
        case 37: 
          { return symbol(sym.FALSE);
          }
        case 88: break;
        case 38: 
          { return symbol(sym.WHILE);
          }
        case 89: break;
        case 39: 
          { return symbol(sym.WRITE);
          }
        case 90: break;
        case 40: 
          { return symbol(sym.DOUBLE);
          }
        case 91: break;
        case 41: 
          { return symbol(sym.ELSEIF);
          }
        case 92: break;
        case 42: 
          { return symbol(sym.CASE);
          }
        case 93: break;
        case 43: 
          { return symbol(sym.STRING);
          }
        case 94: break;
        case 44: 
          { return symbol(sym.SWITCH);
          }
        case 95: break;
        case 45: 
          { return symbol(sym.INTEGER);
          }
        case 96: break;
        case 46: 
          { return symbol(sym.BOOLEAN);
          }
        case 97: break;
        case 47: 
          { return symbol(sym.FUNCTION);
          }
        case 98: break;
        case 48: 
          { return symbol(sym.RETURN);
          }
        case 99: break;
        case 49: 
          { return symbol(sym.READ);
          }
        case 100: break;
        case 50: 
          { return symbol(sym.CHAR);
          }
        case 101: break;
        case 51: 
          { return symbol(sym.DEFAULT);
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
