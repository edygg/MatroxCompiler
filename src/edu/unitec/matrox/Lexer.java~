/* The following code was generated by JFlex 1.6.0 */

package edu.unitec.matrox;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/Edilson Gonzalez/Documents/NetBeansProjects/MatroxCompiler/src/edu/unitec/matrox/MatroxLexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRINGFOUND = 2;
  public static final int CHARFOUND = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\6\1\7\1\7\1\5\22\0\1\7\1\0\1\11"+
    "\1\10\1\1\3\0\1\50\1\51\1\46\1\44\1\42\1\45\1\4"+
    "\1\47\12\2\1\0\1\43\1\56\1\55\1\54\2\0\32\3\1\52"+
    "\1\12\1\53\1\0\1\36\1\0\1\23\1\24\1\21\1\37\1\17"+
    "\1\32\1\20\1\22\1\16\1\3\1\41\1\26\1\30\1\13\1\25"+
    "\1\34\1\3\1\15\1\31\1\14\1\27\1\40\1\33\1\3\1\35"+
    "\1\3\12\0\1\7\32\0\1\7\u15df\0\1\7\u097f\0\13\7\35\0"+
    "\1\7\1\7\5\0\1\7\57\0\1\7\u0fa0\0\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\2\2\5"+
    "\1\2\1\6\1\7\17\3\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\1\1\25\1\2\1\26\1\25\1\0\1\27"+
    "\1\0\1\5\4\3\1\30\10\3\1\31\12\3\1\32"+
    "\1\33\1\34\1\35\1\0\1\36\3\3\1\37\4\3"+
    "\1\40\7\3\1\41\5\3\1\42\1\3\1\43\6\3"+
    "\1\44\6\3\1\45\13\3\1\46\1\3\1\47\1\50"+
    "\1\51\1\3\1\52\5\3\1\53\1\54\1\55\1\3"+
    "\1\56\3\3\1\57\6\3\1\60\1\61\1\62\1\63"+
    "\1\3\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\215\0\u0178\0\215\0\215\0\u01a7\0\u01d6\0\u0205\0\u0234"+
    "\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac"+
    "\0\u03db\0\u040a\0\u0439\0\215\0\215\0\215\0\215\0\215"+
    "\0\215\0\215\0\215\0\215\0\215\0\u0468\0\215\0\u0497"+
    "\0\u04c6\0\215\0\u04f5\0\215\0\u0524\0\u011a\0\u011a\0\u0178"+
    "\0\u0178\0\u0553\0\u0582\0\u05b1\0\u05e0\0\274\0\u060f\0\u063e"+
    "\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\274\0\u0787"+
    "\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\u092e\0\215\0\215\0\215\0\215\0\u04f5\0\274\0\u095d"+
    "\0\u098c\0\u09bb\0\274\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\274"+
    "\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\274"+
    "\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\274\0\u0cda\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\274\0\u0e52"+
    "\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\274\0\u0f6c\0\u0f9b"+
    "\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113"+
    "\0\u1142\0\274\0\u1171\0\274\0\274\0\274\0\u11a0\0\274"+
    "\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\274\0\274\0\274"+
    "\0\u12ba\0\274\0\u12e9\0\u1318\0\u1347\0\274\0\u1376\0\u13a5"+
    "\0\u13d4\0\u1403\0\u1432\0\u1461\0\274\0\274\0\274\0\274"+
    "\0\u1490\0\274";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\5\1\7\1\10\2\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\5\1\17\1\20\1\21"+
    "\1\22\1\5\1\23\1\24\1\25\2\5\1\26\1\27"+
    "\1\30\1\31\1\32\3\5\1\33\1\5\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\11\51\1\52\1\53\44\51\12\54"+
    "\1\55\44\54\61\0\2\5\7\0\27\5\17\0\1\6"+
    "\1\0\1\56\54\0\1\57\62\0\1\11\50\0\10\60"+
    "\1\61\46\60\2\0\2\5\7\0\12\5\1\62\1\5"+
    "\1\63\12\5\17\0\2\5\7\0\2\5\1\64\24\5"+
    "\17\0\2\5\7\0\1\65\16\5\1\66\7\5\17\0"+
    "\2\5\7\0\1\67\12\5\1\70\13\5\17\0\2\5"+
    "\7\0\3\5\1\71\1\72\22\5\17\0\2\5\7\0"+
    "\7\5\1\73\17\5\17\0\2\5\7\0\1\74\26\5"+
    "\17\0\2\5\7\0\12\5\1\75\7\5\1\76\4\5"+
    "\17\0\2\5\7\0\2\5\1\77\16\5\1\100\5\5"+
    "\17\0\2\5\7\0\10\5\1\101\16\5\17\0\2\5"+
    "\7\0\1\5\1\102\16\5\1\103\6\5\17\0\2\5"+
    "\7\0\10\5\1\104\1\5\1\105\1\5\1\106\12\5"+
    "\17\0\2\5\7\0\7\5\1\107\17\5\17\0\2\5"+
    "\7\0\2\5\1\110\24\5\17\0\2\5\7\0\12\5"+
    "\1\111\14\5\72\0\1\112\46\0\1\113\6\0\1\114"+
    "\1\115\1\0\11\51\1\0\1\116\44\51\11\0\5\51"+
    "\53\0\4\54\43\0\2\5\7\0\1\5\1\117\25\5"+
    "\17\0\2\5\7\0\15\5\1\120\11\5\17\0\2\5"+
    "\7\0\14\5\1\121\12\5\17\0\2\5\7\0\1\5"+
    "\1\122\25\5\17\0\2\5\7\0\24\5\1\123\2\5"+
    "\17\0\2\5\7\0\16\5\1\124\10\5\17\0\2\5"+
    "\7\0\25\5\1\125\1\5\17\0\2\5\7\0\1\5"+
    "\1\126\25\5\17\0\2\5\7\0\10\5\1\127\16\5"+
    "\17\0\2\5\7\0\24\5\1\130\2\5\17\0\2\5"+
    "\7\0\12\5\1\131\14\5\17\0\2\5\7\0\23\5"+
    "\1\132\3\5\17\0\2\5\7\0\1\5\1\133\25\5"+
    "\17\0\2\5\7\0\3\5\1\134\23\5\17\0\2\5"+
    "\7\0\2\5\1\135\24\5\17\0\2\5\7\0\3\5"+
    "\1\136\23\5\17\0\2\5\7\0\13\5\1\137\13\5"+
    "\17\0\2\5\7\0\2\5\1\140\24\5\17\0\2\5"+
    "\7\0\1\141\26\5\17\0\2\5\7\0\3\5\1\142"+
    "\23\5\17\0\2\5\7\0\3\5\1\143\23\5\17\0"+
    "\2\5\7\0\3\5\1\144\23\5\17\0\2\5\7\0"+
    "\11\5\1\145\15\5\17\0\2\5\7\0\4\5\1\146"+
    "\22\5\17\0\2\5\7\0\4\5\1\147\22\5\17\0"+
    "\2\5\7\0\4\5\1\150\22\5\17\0\2\5\7\0"+
    "\4\5\1\151\22\5\17\0\2\5\7\0\23\5\1\152"+
    "\3\5\17\0\2\5\7\0\2\5\1\153\24\5\17\0"+
    "\2\5\7\0\13\5\1\154\13\5\17\0\2\5\7\0"+
    "\24\5\1\155\2\5\17\0\2\5\7\0\3\5\1\156"+
    "\23\5\17\0\2\5\7\0\1\157\26\5\17\0\2\5"+
    "\7\0\3\5\1\160\23\5\17\0\2\5\7\0\1\5"+
    "\1\161\25\5\17\0\2\5\7\0\16\5\1\162\10\5"+
    "\17\0\2\5\7\0\6\5\1\163\20\5\17\0\2\5"+
    "\7\0\13\5\1\164\13\5\17\0\2\5\7\0\1\165"+
    "\26\5\17\0\2\5\7\0\24\5\1\166\2\5\17\0"+
    "\2\5\7\0\4\5\1\167\22\5\17\0\2\5\7\0"+
    "\5\5\1\170\21\5\17\0\2\5\7\0\3\5\1\171"+
    "\23\5\17\0\2\5\7\0\23\5\1\172\3\5\17\0"+
    "\2\5\7\0\25\5\1\173\1\5\17\0\2\5\7\0"+
    "\10\5\1\174\16\5\17\0\2\5\7\0\4\5\1\175"+
    "\22\5\17\0\2\5\7\0\4\5\1\176\22\5\17\0"+
    "\2\5\7\0\12\5\1\177\14\5\17\0\2\5\7\0"+
    "\1\200\26\5\17\0\2\5\7\0\6\5\1\201\20\5"+
    "\17\0\2\5\7\0\4\5\1\202\22\5\17\0\2\5"+
    "\7\0\1\5\1\203\25\5\17\0\2\5\7\0\4\5"+
    "\1\204\22\5\17\0\2\5\7\0\1\5\1\205\25\5"+
    "\17\0\2\5\7\0\2\5\1\206\24\5\17\0\2\5"+
    "\7\0\4\5\1\207\22\5\17\0\2\5\7\0\17\5"+
    "\1\210\7\5\17\0\2\5\7\0\11\5\1\211\15\5"+
    "\17\0\2\5\7\0\10\5\1\212\16\5\17\0\2\5"+
    "\7\0\6\5\1\213\20\5\17\0\2\5\7\0\10\5"+
    "\1\214\16\5\17\0\2\5\7\0\17\5\1\215\7\5"+
    "\17\0\2\5\7\0\1\216\26\5\17\0\2\5\7\0"+
    "\5\5\1\217\21\5\17\0\2\5\7\0\7\5\1\220"+
    "\17\5\17\0\2\5\7\0\3\5\1\221\23\5\17\0"+
    "\2\5\7\0\2\5\1\222\24\5\17\0\2\5\7\0"+
    "\10\5\1\223\16\5\17\0\2\5\7\0\13\5\1\224"+
    "\13\5\17\0\2\5\7\0\1\5\1\225\25\5\17\0"+
    "\2\5\7\0\1\226\26\5\17\0\2\5\7\0\10\5"+
    "\1\227\16\5\17\0\2\5\7\0\12\5\1\230\14\5"+
    "\17\0\2\5\7\0\6\5\1\231\20\5\17\0\2\5"+
    "\7\0\14\5\1\232\12\5\17\0\2\5\7\0\4\5"+
    "\1\233\22\5\17\0\2\5\7\0\14\5\1\234\12\5"+
    "\17\0\2\5\7\0\1\235\26\5\17\0\2\5\7\0"+
    "\26\5\1\236\17\0\2\5\7\0\4\5\1\237\22\5"+
    "\17\0\2\5\7\0\2\5\1\240\24\5\17\0\2\5"+
    "\7\0\13\5\1\241\13\5\17\0\2\5\7\0\1\5"+
    "\1\242\25\5\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5311];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\1\11\4\1\1\11\1\1\2\11"+
    "\17\1\12\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\31\1\4\11\1\0\124\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return symbol(sym.STRINGCONTENT, yytext());
          }
        case 53: break;
        case 2: 
          { System.err.println("Illegal character <" + yytext() + "> at line: " + (yyline + 1) + " column: " + (yycolumn + 1));
          }
        case 54: break;
        case 3: 
          { return symbol(sym.IDENTIFIER, yytext());
          }
        case 55: break;
        case 4: 
          { return symbol(sym.INTNUMBER, new Integer(Integer.parseInt(yytext())));
          }
        case 56: break;
        case 5: 
          { /* ignore */
          }
        case 57: break;
        case 6: 
          { yybegin(STRINGFOUND);
          }
        case 58: break;
        case 7: 
          { yybegin(CHARFOUND);
          }
        case 59: break;
        case 8: 
          { return symbol(sym.COMMA);
          }
        case 60: break;
        case 9: 
          { return symbol(sym.SEMICOLON);
          }
        case 61: break;
        case 10: 
          { return symbol(sym.ADD);
          }
        case 62: break;
        case 11: 
          { return symbol(sym.MIN);
          }
        case 63: break;
        case 12: 
          { return symbol(sym.MUL);
          }
        case 64: break;
        case 13: 
          { return symbol(sym.DIV);
          }
        case 65: break;
        case 14: 
          { return symbol(sym.LPAR);
          }
        case 66: break;
        case 15: 
          { return symbol(sym.RPAR);
          }
        case 67: break;
        case 16: 
          { return symbol(sym.LBRACK);
          }
        case 68: break;
        case 17: 
          { return symbol(sym.RBRACK);
          }
        case 69: break;
        case 18: 
          { return symbol(sym.GREATER);
          }
        case 70: break;
        case 19: 
          { return symbol(sym.EQU);
          }
        case 71: break;
        case 20: 
          { return symbol(sym.LESS);
          }
        case 72: break;
        case 21: 
          { yybegin(YYINITIAL);
          }
        case 73: break;
        case 22: 
          { return symbol(sym.CHARCONTENT, new Character(yytext().charAt(0)));
          }
        case 74: break;
        case 23: 
          { return symbol(sym.DOUBLENUMBER, new Double(Double.parseDouble(yytext())));
          }
        case 75: break;
        case 24: 
          { return symbol(sym.IF);
          }
        case 76: break;
        case 25: 
          { return symbol(sym.OR);
          }
        case 77: break;
        case 26: 
          { return symbol(sym.GREATEREQ);
          }
        case 78: break;
        case 27: 
          { return symbol(sym.ASSIGN);
          }
        case 79: break;
        case 28: 
          { return symbol(sym.NEQ);
          }
        case 80: break;
        case 29: 
          { return symbol(sym.LESSEQ);
          }
        case 81: break;
        case 30: 
          { return symbol(sym.NOT);
          }
        case 82: break;
        case 31: 
          { return symbol(sym.END);
          }
        case 83: break;
        case 32: 
          { return symbol(sym.AND);
          }
        case 84: break;
        case 33: 
          { return symbol(sym.FOR);
          }
        case 85: break;
        case 34: 
          { return symbol(sym.TRUE);
          }
        case 86: break;
        case 35: 
          { return symbol(sym.ELSE);
          }
        case 87: break;
        case 36: 
          { return symbol(sym.MAIN);
          }
        case 88: break;
        case 37: 
          { return symbol(sym.VOID);
          }
        case 89: break;
        case 38: 
          { return symbol(sym.FALSE);
          }
        case 90: break;
        case 39: 
          { return symbol(sym.WHILE);
          }
        case 91: break;
        case 40: 
          { return symbol(sym.WRITE);
          }
        case 92: break;
        case 41: 
          { return symbol(sym.DOUBLE);
          }
        case 93: break;
        case 42: 
          { return symbol(sym.ELSEIF);
          }
        case 94: break;
        case 43: 
          { return symbol(sym.CASE);
          }
        case 95: break;
        case 44: 
          { return symbol(sym.STRING);
          }
        case 96: break;
        case 45: 
          { return symbol(sym.SWITCH);
          }
        case 97: break;
        case 46: 
          { return symbol(sym.INTEGER);
          }
        case 98: break;
        case 47: 
          { return symbol(sym.BOOLEAN);
          }
        case 99: break;
        case 48: 
          { return symbol(sym.FUNCTION);
          }
        case 100: break;
        case 49: 
          { return symbol(sym.RETURN);
          }
        case 101: break;
        case 50: 
          { return symbol(sym.READ);
          }
        case 102: break;
        case 51: 
          { return symbol(sym.CHAR);
          }
        case 103: break;
        case 52: 
          { return symbol(sym.DEFAULT);
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
