
package edu.unitec.matrox;

import java_cup.runtime.*;

parser code {:
    public Parser(java.io.Reader input) {
        super(new Lexer(input));
    }
:}

/* Types */
terminal INTEGER, CHAR, BOOLEAN, DOUBLE, STRING;

/* Boolean types */
terminal TRUE, FALSE;

/* Flow control structures */
terminal IF, ELSE, WHILE, FOR, SWITCH, CASE, BREAK, DEFAULT, END;

/* Functions */
terminal FUNCTION, RETURN, VOID;

/* I/O */
terminal WRITE, READ;

/* Comma & COLON symbol */
terminal COMMA, COLON;

/* Arithmetic operators */
terminal ADD, MIN, MUL, DIV;

/* Grouping symbols */
terminal LPAR, RPAR, LBRACK, RBRACK;

/* Relationship operators */
terminal GREATEREQ, LESSEQ, GREATER, LESS, NEQ, EQU;

/* Logic operators */
terminal NOT, OR, AND;

/* Assignment operator */
terminal ASSIGN;

/* Values */
terminal String IDENTIFIER;
terminal Integer INTNUMBER;
terminal Double DOUBLENUMBER;
terminal Character CHARCONTENT;
terminal String STRINGCONTENT;

/* Non terminals */
non terminal exp, statement, switchStatement, numericExp, logicalExp, compareExp, stringExp, argList;

/* Precedences */
precedence left ADD, MIN;
precedence left MUL, DIV;


argList ::= 
      exp { COMMA exp } 
;

stringExp ::= 
      ( exp
      ( ADD 
      | ADD EQU ) 
      exp )
;

numericExp ::= 
      ( ( MIN 
      | ADD ADD
      | MIN MIN ) 
      exp ) 
      | ( exp 
      ( ADD 
      | MIN MIN ) ) 
      | ( exp 
      ( ADD 
      | ADD EQU 
      | MIN 
      | MIN EQU 
      | MUL 
      | MUL EQU 
      | DIV 
      | DIV EQU 
      exp )
;

logicalExp ::= 
      ( NOT exp ) 
      | ( exp 
      ( OR
      | AND 
      | EQU ) 
      exp ) 
      | TRUE
      | FALSE
;

compareExp ::= 
      ( exp 
      ( GREATER 
      | LESS
      | GREATEREQ 
      | LESSEQ
      | EQU 
      | NEQ ) 
      exp )
;

exp ::= 
      numericExp 
      | compareExp 
      | logicalExp 
      | stringExp  
      | IDENTIFIER
      |  LPAR exp RPAR 
      | ( exp 
      (  LBRACK argList RBRACK 
      |  LBRACK exp RBRACK  
      |  COMMA exp ) ) 
;

/* Falta hacer el Statement */
switchStatement ::= 
      SWITCH LPAR exp RPAR  
      { ( CASE exp COLON ) 
      | ( DEFAULT COLON ) 
      | statement } 
      END
;
