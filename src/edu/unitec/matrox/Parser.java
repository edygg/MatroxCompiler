
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package edu.unitec.matrox;

import edu.unitec.ast.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\003\000\002\004\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\005\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\004\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\006\000\002\007\005" +
    "\000\002\007\006\000\002\007\005\000\002\007\006\000" +
    "\002\007\005\000\002\007\006\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\011\004\000\002\011\005" +
    "\000\002\011\005\000\002\011\003\000\002\011\003\000" +
    "\002\012\010\000\002\013\010\000\002\014\004\000\002" +
    "\014\003\000\002\015\006\000\002\015\006\000\002\016" +
    "\005\000\002\016\003\000\002\017\010\000\002\017\012" +
    "\000\002\017\011\000\002\017\013\000\002\020\004\000" +
    "\002\020\003\000\002\021\007\000\002\022\004\000\002" +
    "\022\004\000\002\023\005\000\002\023\003\000\002\024" +
    "\005\000\002\025\005\000\002\025\003\000\002\026\004" +
    "\000\002\027\005\000\002\027\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\031\003\000\002\031\003\000\002\032" +
    "\014\000\002\032\014\000\002\033\004\000\002\033\003" +
    "\000\002\034\012\000\002\034\011\000\002\034\011\000" +
    "\002\034\012\000\002\034\011\000\002\035\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\025\007\001\002\000\004\002\277\001" +
    "\002\000\004\002\001\001\002\000\006\002\uffae\025\007" +
    "\001\002\000\016\004\010\005\015\006\014\007\011\010" +
    "\012\027\016\001\002\000\006\024\271\065\uffb8\001\002" +
    "\000\004\065\uffb5\001\002\000\004\065\uffb4\001\002\000" +
    "\004\065\260\001\002\000\004\065\uffb6\001\002\000\004" +
    "\065\uffb7\001\002\000\004\065\017\001\002\000\004\045" +
    "\020\001\002\000\016\004\021\005\015\006\014\007\011" +
    "\010\012\046\022\001\002\000\004\065\uffb8\001\002\000" +
    "\062\003\051\004\021\005\015\006\014\007\011\010\012" +
    "\011\050\012\062\013\045\016\056\017\035\020\053\023" +
    "\ufffe\026\047\030\036\031\054\035\044\043\061\055\040" +
    "\065\066\066\065\067\052\070\032\071\063\001\002\000" +
    "\004\065\255\001\002\000\006\032\253\046\uffbc\001\002" +
    "\000\004\046\026\001\002\000\062\003\051\004\021\005" +
    "\015\006\014\007\011\010\012\011\050\012\062\013\045" +
    "\016\056\017\035\020\053\023\ufffe\026\047\030\036\031" +
    "\054\035\044\043\061\055\040\065\066\066\065\067\052" +
    "\070\032\071\063\001\002\000\124\003\uffef\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\023\uffef\026" +
    "\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\036\uffef\037\uffef\043\uffef\044\uffef\046\uffef\047\uffef\050" +
    "\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef" +
    "\057\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\001" +
    "\002\000\124\003\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\023\ufff2\026\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\043" +
    "\ufff2\044\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\065\ufff2\066" +
    "\ufff2\067\ufff2\070\ufff2\071\ufff2\001\002\000\124\003\ufff0" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\023\ufff0\026\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\043\ufff0\044\ufff0\046\ufff0" +
    "\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0" +
    "\071\ufff0\001\002\000\124\003\uffe8\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\023\uffe8\026\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\043\uffe8\044\uffe8\046\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\001\002\000" +
    "\004\023\252\001\002\000\066\003\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\023\ufffa\026\ufffa" +
    "\030\ufffa\031\ufffa\035\ufffa\043\ufffa\055\ufffa\065\ufffa\066" +
    "\ufffa\067\ufffa\070\ufffa\071\ufffa\001\002\000\004\043\233" +
    "\001\002\000\026\011\050\012\062\035\044\043\061\055" +
    "\040\065\075\066\065\067\052\070\032\071\063\001\002" +
    "\000\066\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\023\ufffb\026\ufffb\030\ufffb\031\ufffb\035" +
    "\ufffb\043\ufffb\055\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb" +
    "\071\ufffb\001\002\000\026\011\050\012\062\035\044\043" +
    "\061\055\040\065\075\066\065\067\052\070\032\071\063" +
    "\001\002\000\066\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\023\ufffd\026\ufffd\030\ufffd\031" +
    "\ufffd\035\ufffd\043\ufffd\055\ufffd\065\ufffd\066\ufffd\067\ufffd" +
    "\070\ufffd\071\ufffd\001\002\000\066\003\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\023\ufff9\026" +
    "\ufff9\030\ufff9\031\ufff9\035\ufff9\043\ufff9\055\ufff9\065\ufff9" +
    "\066\ufff9\067\ufff9\070\ufff9\071\ufff9\001\002\000\066\003" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020" +
    "\ufff8\023\ufff8\026\ufff8\030\ufff8\031\ufff8\035\ufff8\043\ufff8" +
    "\055\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\001" +
    "\002\000\026\011\050\012\062\035\044\043\061\055\040" +
    "\065\075\066\065\067\052\070\032\071\063\001\002\000" +
    "\004\043\205\001\002\000\066\003\051\004\021\005\015" +
    "\006\014\007\011\010\012\011\050\012\062\013\045\014" +
    "\ufffe\015\ufffe\016\056\017\035\020\053\023\ufffe\026\047" +
    "\030\036\031\054\035\044\043\061\055\040\065\066\066" +
    "\065\067\052\070\032\071\063\001\002\000\026\011\050" +
    "\012\062\035\044\043\061\055\040\065\075\066\065\067" +
    "\052\070\032\071\063\001\002\000\124\003\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\023\uffd3" +
    "\026\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\043\uffd3\044\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\057\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3" +
    "\001\002\000\066\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\023\ufff3\026\ufff3\030\ufff3\031" +
    "\ufff3\035\ufff3\043\ufff3\055\ufff3\065\ufff3\066\ufff3\067\ufff3" +
    "\070\ufff3\071\ufff3\001\002\000\124\003\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\023\uffea\026" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\043\uffea\044\uffea\046\uffea\047\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea" +
    "\057\uffea\065\uffea\066\uffea\067\uffea\070\uffea\071\uffea\001" +
    "\002\000\004\043\162\001\002\000\026\011\050\012\062" +
    "\035\044\043\061\055\040\065\075\066\065\067\052\070" +
    "\032\071\063\001\002\000\066\003\ufffc\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\023\ufffc\026\ufffc" +
    "\030\ufffc\031\ufffc\035\ufffc\043\ufffc\055\ufffc\065\ufffc\066" +
    "\ufffc\067\ufffc\070\ufffc\071\ufffc\001\002\000\004\043\154" +
    "\001\002\000\124\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\023\ufff1\026\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\043\ufff1\044\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\065\ufff1" +
    "\066\ufff1\067\ufff1\070\ufff1\071\ufff1\001\002\000\124\003" +
    "\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\023\uffee\026\uffee\030\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\037\uffee\043\uffee\044\uffee\046" +
    "\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee" +
    "\055\uffee\056\uffee\057\uffee\065\uffee\066\uffee\067\uffee\070" +
    "\uffee\071\uffee\001\002\000\026\011\050\012\062\035\044" +
    "\043\061\055\040\065\075\066\065\067\052\070\032\071" +
    "\063\001\002\000\124\003\uffd2\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\023\uffd2\026\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\043\uffd2\044\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\065" +
    "\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\001\002\000\124" +
    "\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\023\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\043\uffe9\044\uffe9" +
    "\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\057\uffe9\065\uffe9\066\uffe9\067\uffe9" +
    "\070\uffe9\071\uffe9\001\002\000\114\003\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\023\ufff4\026" +
    "\ufff4\030\ufff4\031\ufff4\034\107\035\115\036\113\037\110" +
    "\043\ufff4\047\105\050\103\051\104\052\112\053\106\054" +
    "\102\055\ufff4\056\114\057\101\065\ufff4\066\ufff4\067\ufff4" +
    "\070\ufff4\071\ufff4\001\002\000\124\003\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\023\uffeb\026" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\043\uffeb\044\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\001" +
    "\002\000\122\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\023\uffed\026\uffed\030\uffed\031\uffed" +
    "\034\uffed\035\uffed\036\uffed\037\uffed\043\uffed\044\uffed\045" +
    "\076\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\056\uffed\057\uffed\060\073\065\uffed\066\uffed\067" +
    "\uffed\070\uffed\071\uffed\001\002\000\004\065\071\001\002" +
    "\000\072\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\023\uffbf\026\uffbf\030\uffbf\031\uffbf\032" +
    "\147\033\uffbf\035\uffbf\043\uffbf\055\uffbf\065\uffbf\066\uffbf" +
    "\067\uffbf\070\uffbf\071\uffbf\001\002\000\072\003\uffc1\004" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\023" +
    "\uffc1\026\uffc1\030\uffc1\031\uffc1\033\uffc1\035\uffc1\043\uffc1" +
    "\055\uffc1\060\073\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071" +
    "\uffc1\001\002\000\070\003\uffc2\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\023\uffc2\026\uffc2\030\uffc2" +
    "\031\uffc2\033\uffc2\035\uffc2\043\uffc2\055\uffc2\065\uffc2\066" +
    "\uffc2\067\uffc2\070\uffc2\071\uffc2\001\002\000\026\011\050" +
    "\012\062\035\044\043\061\055\040\065\075\066\065\067" +
    "\052\070\032\071\063\001\002\000\122\003\uffbe\004\uffbe" +
    "\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\023\uffbe" +
    "\026\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\107\035" +
    "\115\036\113\037\110\043\uffbe\044\uffbe\047\105\050\103" +
    "\051\104\052\112\053\106\054\102\055\uffbe\056\114\057" +
    "\101\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\001\002" +
    "\000\126\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\023\uffed\026\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\043\uffed" +
    "\044\uffed\045\076\046\uffed\047\uffed\050\uffed\051\uffed\052" +
    "\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\065\uffed" +
    "\066\uffed\067\uffed\070\uffed\071\uffed\001\002\000\026\011" +
    "\050\012\062\035\044\043\061\055\040\065\075\066\065" +
    "\067\052\070\032\071\063\001\002\000\004\046\146\001" +
    "\002\000\036\032\111\034\107\035\115\036\113\037\110" +
    "\046\uffb9\047\105\050\103\051\104\052\112\053\106\054" +
    "\102\056\114\057\101\001\002\000\026\011\050\012\062" +
    "\035\044\043\061\055\040\065\075\066\065\067\052\070" +
    "\032\071\063\001\002\000\026\011\050\012\062\035\044" +
    "\043\061\055\040\065\075\066\065\067\052\070\032\071" +
    "\063\001\002\000\026\011\050\012\062\035\044\043\061" +
    "\055\040\065\075\066\065\067\052\070\032\071\063\001" +
    "\002\000\026\011\050\012\062\035\044\043\061\055\040" +
    "\065\075\066\065\067\052\070\032\071\063\001\002\000" +
    "\026\011\050\012\062\035\044\043\061\055\040\065\075" +
    "\066\065\067\052\070\032\071\063\001\002\000\026\011" +
    "\050\012\062\035\044\043\061\055\040\065\075\066\065" +
    "\067\052\070\032\071\063\001\002\000\032\011\050\012" +
    "\062\034\135\035\044\043\061\055\040\060\136\065\075" +
    "\066\065\067\052\070\032\071\063\001\002\000\030\011" +
    "\050\012\062\035\044\043\061\055\040\060\132\065\075" +
    "\066\065\067\052\070\032\071\063\001\002\000\026\011" +
    "\050\012\062\035\044\043\061\055\040\065\075\066\065" +
    "\067\052\070\032\071\063\001\002\000\026\011\050\012" +
    "\062\035\044\043\061\055\040\065\075\066\065\067\052" +
    "\070\032\071\063\001\002\000\030\011\050\012\062\035" +
    "\044\043\061\055\040\060\125\065\075\066\065\067\052" +
    "\070\032\071\063\001\002\000\026\011\050\012\062\035" +
    "\044\043\061\055\040\065\075\066\065\067\052\070\032" +
    "\071\063\001\002\000\030\011\050\012\062\035\120\043" +
    "\061\055\040\060\117\065\075\066\065\067\052\070\032" +
    "\071\063\001\002\000\124\003\uffe2\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\023\uffe2\026\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\113" +
    "\037\110\043\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2" +
    "\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\001\002\000" +
    "\026\011\050\012\062\035\044\043\061\055\040\065\075" +
    "\066\065\067\052\070\032\071\063\001\002\000\124\003" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\023\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\043\uffe5\044\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\065\uffe5\066\uffe5\067\uffe5\070" +
    "\uffe5\071\uffe5\001\002\000\124\003\uffe7\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\023\uffe7\026\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\043\uffe7\044\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\001\002" +
    "\000\124\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\023\uffe1\026\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\107\035\115\036\113\037\110\043\uffe1" +
    "\044\uffe1\046\uffe1\047\105\050\103\051\104\052\112\053" +
    "\106\054\102\055\uffe1\056\114\057\101\065\uffe1\066\uffe1" +
    "\067\uffe1\070\uffe1\071\uffe1\001\002\000\124\003\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\023" +
    "\uffd5\026\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\107" +
    "\035\115\036\113\037\110\043\uffd5\044\uffd5\046\uffd5\047" +
    "\105\050\103\051\104\052\112\053\106\054\102\055\uffd5" +
    "\056\uffd5\057\101\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071" +
    "\uffd5\001\002\000\124\003\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\023\uffe0\026\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\043\uffe0\044\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0" +
    "\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\001\002\000\026" +
    "\011\050\012\062\035\044\043\061\055\040\065\075\066" +
    "\065\067\052\070\032\071\063\001\002\000\124\003\uffdf" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\023\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\107\035\115\036\113\037\110\043\uffdf\044\uffdf\046\uffdf" +
    "\047\105\050\103\051\104\052\112\053\106\054\102\055" +
    "\uffdf\056\114\057\101\065\uffdf\066\uffdf\067\uffdf\070\uffdf" +
    "\071\uffdf\001\002\000\124\003\uffdb\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\023\uffdb\026\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\107\035\115\036\113" +
    "\037\110\043\uffdb\044\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\001\002\000" +
    "\004\046\uffba\001\002\000\124\003\uffde\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\023\uffde\026\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\043\uffde\044\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057" +
    "\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071\uffde\001\002" +
    "\000\026\011\050\012\062\035\044\043\061\055\040\065" +
    "\075\066\065\067\052\070\032\071\063\001\002\000\124" +
    "\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\023\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\107\035\115\036\113\037\110\043\uffdd\044\uffdd" +
    "\046\uffdd\047\105\050\103\051\104\052\112\053\106\054" +
    "\102\055\uffdd\056\114\057\101\065\uffdd\066\uffdd\067\uffdd" +
    "\070\uffdd\071\uffdd\001\002\000\124\003\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\023\uffe4\026" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\113\037\110\043\uffe4\044\uffe4\046\uffe4\047\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4" +
    "\057\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\001" +
    "\002\000\124\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\023\uffe6\026\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\043" +
    "\uffe6\044\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\065\uffe6\066" +
    "\uffe6\067\uffe6\070\uffe6\071\uffe6\001\002\000\026\011\050" +
    "\012\062\035\044\043\061\055\040\065\075\066\065\067" +
    "\052\070\032\071\063\001\002\000\124\003\uffe3\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\023\uffe3" +
    "\026\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\107\035" +
    "\115\036\113\037\110\043\uffe3\044\uffe3\046\uffe3\047\105" +
    "\050\103\051\104\052\112\053\106\054\102\055\uffe3\056" +
    "\114\057\101\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3" +
    "\001\002\000\124\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\023\uffd7\026\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\107\035\115\036\113\037\110" +
    "\043\uffd7\044\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\065\uffd7" +
    "\066\uffd7\067\uffd7\070\uffd7\071\uffd7\001\002\000\124\003" +
    "\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\023\uffda\026\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\107\035\115\036\113\037\110\043\uffda\044\uffda\046" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda" +
    "\055\uffda\056\uffda\057\uffda\065\uffda\066\uffda\067\uffda\070" +
    "\uffda\071\uffda\001\002\000\124\003\uffdc\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\023\uffdc\026\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\107\035\115\036" +
    "\113\037\110\043\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\001\002" +
    "\000\124\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\023\uffd9\026\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\107\035\115\036\113\037\110\043\uffd9" +
    "\044\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\065\uffd9\066\uffd9" +
    "\067\uffd9\070\uffd9\071\uffd9\001\002\000\124\003\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\023" +
    "\uffd8\026\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\107" +
    "\035\115\036\113\037\110\043\uffd8\044\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071" +
    "\uffd8\001\002\000\124\003\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\023\uffd4\026\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\107\035\115\036\113\037" +
    "\110\043\uffd4\044\uffd4\046\uffd4\047\105\050\103\051\104" +
    "\052\112\053\106\054\102\055\uffd4\056\uffd4\057\uffd4\065" +
    "\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\001\002\000\124" +
    "\003\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011" +
    "\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8" +
    "\020\uffa8\023\uffa8\026\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\043\uffa8\044\uffa8" +
    "\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054" +
    "\uffa8\055\uffa8\056\uffa8\057\uffa8\065\uffa8\066\uffa8\067\uffa8" +
    "\070\uffa8\071\uffa8\001\002\000\004\065\150\001\002\000" +
    "\004\060\073\001\002\000\070\003\uffc0\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\023\uffc0\026\uffc0" +
    "\030\uffc0\031\uffc0\033\uffc0\035\uffc0\043\uffc0\055\uffc0\065" +
    "\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\001\002\000\034" +
    "\034\107\035\115\036\113\037\110\044\153\047\105\050" +
    "\103\051\104\052\112\053\106\054\102\056\114\057\101" +
    "\001\002\000\124\003\uffec\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\023\uffec\026\uffec\030\uffec\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\043\uffec\044\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052" +
    "\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\065\uffec" +
    "\066\uffec\067\uffec\070\uffec\071\uffec\001\002\000\026\011" +
    "\050\012\062\035\044\043\061\055\040\065\075\066\065" +
    "\067\052\070\032\071\063\001\002\000\034\034\107\035" +
    "\115\036\113\037\110\044\156\047\105\050\103\051\104" +
    "\052\112\053\106\054\102\056\114\057\101\001\002\000" +
    "\062\003\051\004\021\005\015\006\014\007\011\010\012" +
    "\011\050\012\062\013\045\016\056\017\035\020\053\023" +
    "\ufffe\026\047\030\036\031\054\035\044\043\061\055\040" +
    "\065\066\066\065\067\052\070\032\071\063\001\002\000" +
    "\004\023\160\001\002\000\066\003\uffd1\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\023\uffd1\026\uffd1" +
    "\030\uffd1\031\uffd1\035\uffd1\043\uffd1\055\uffd1\065\uffd1\066" +
    "\uffd1\067\uffd1\070\uffd1\071\uffd1\001\002\000\114\003\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\023\ufff6\026\ufff6\030\ufff6\031\ufff6\034\107\035\115\036" +
    "\113\037\110\043\ufff6\047\105\050\103\051\104\052\112" +
    "\053\106\054\102\055\ufff6\056\114\057\101\065\ufff6\066" +
    "\ufff6\067\ufff6\070\ufff6\071\ufff6\001\002\000\026\011\050" +
    "\012\062\035\044\043\061\055\040\065\075\066\065\067" +
    "\052\070\032\071\063\001\002\000\034\034\107\035\115" +
    "\036\113\037\110\044\164\047\105\050\103\051\104\052" +
    "\112\053\106\054\102\056\114\057\101\001\002\000\004" +
    "\021\167\001\002\000\004\023\202\001\002\000\006\021" +
    "\167\023\uffce\001\002\000\030\011\050\012\062\022\172" +
    "\035\044\043\061\055\040\065\075\066\065\067\052\070" +
    "\032\071\063\001\002\000\112\003\uffca\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\016" +
    "\uffca\017\uffca\020\uffca\023\uffca\026\uffca\030\uffca\031\uffca" +
    "\032\177\034\107\035\115\036\113\037\110\043\uffca\047" +
    "\105\050\103\051\104\052\112\053\106\054\102\055\uffca" +
    "\056\114\057\101\065\uffca\066\uffca\067\uffca\070\uffca\071" +
    "\uffca\001\002\000\062\003\051\004\021\005\015\006\014" +
    "\007\011\010\012\011\050\012\062\013\045\016\056\017" +
    "\035\020\053\023\ufffe\026\047\030\036\031\054\035\044" +
    "\043\061\055\040\065\066\066\065\067\052\070\032\071" +
    "\063\001\002\000\062\003\051\004\021\005\015\006\014" +
    "\007\011\010\012\011\050\012\062\013\045\016\056\017" +
    "\035\020\053\023\ufffe\026\047\030\036\031\054\035\044" +
    "\043\061\055\040\065\066\066\065\067\052\070\032\071" +
    "\063\001\002\000\004\023\174\001\002\000\006\021\uffcc" +
    "\023\uffcc\001\002\000\004\023\176\001\002\000\006\021" +
    "\uffcd\023\uffcd\001\002\000\026\011\050\012\062\035\044" +
    "\043\061\055\040\065\075\066\065\067\052\070\032\071" +
    "\063\001\002\000\062\003\uffcb\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\023\uffcb\026\uffcb\030\uffcb\031\uffcb\035\uffcb" +
    "\043\uffcb\055\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071" +
    "\uffcb\001\002\000\004\023\uffcf\001\002\000\066\003\uffd0" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\023\uffd0\026\uffd0\030\uffd0\031\uffd0\035\uffd0\043\uffd0\055" +
    "\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\001\002" +
    "\000\114\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\023\ufff7\026\ufff7\030\ufff7\031\ufff7\034" +
    "\107\035\115\036\113\037\110\043\ufff7\047\105\050\103" +
    "\051\104\052\112\053\106\054\102\055\ufff7\056\114\057" +
    "\101\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\001\002" +
    "\000\010\014\uffff\015\uffff\023\uffff\001\002\000\026\011" +
    "\050\012\062\035\044\043\061\055\040\065\075\066\065" +
    "\067\052\070\032\071\063\001\002\000\034\034\107\035" +
    "\115\036\113\037\110\044\207\047\105\050\103\051\104" +
    "\052\112\053\106\054\102\056\114\057\101\001\002\000" +
    "\066\003\051\004\021\005\015\006\014\007\011\010\012" +
    "\011\050\012\062\013\045\014\ufffe\015\ufffe\016\056\017" +
    "\035\020\053\023\ufffe\026\047\030\036\031\054\035\044" +
    "\043\061\055\040\065\066\066\065\067\052\070\032\071" +
    "\063\001\002\000\010\014\211\015\212\023\215\001\002" +
    "\000\062\003\051\004\021\005\015\006\014\007\011\010" +
    "\012\011\050\012\062\013\045\016\056\017\035\020\053" +
    "\023\ufffe\026\047\030\036\031\054\035\044\043\061\055" +
    "\040\065\066\066\065\067\052\070\032\071\063\001\002" +
    "\000\004\043\223\001\002\000\010\014\uffc4\015\212\023" +
    "\uffc4\001\002\000\006\014\216\023\217\001\002\000\066" +
    "\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\023\uffc9\026\uffc9\030\uffc9\031\uffc9\035\uffc9\043" +
    "\uffc9\055\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9" +
    "\001\002\000\062\003\051\004\021\005\015\006\014\007" +
    "\011\010\012\011\050\012\062\013\045\016\056\017\035" +
    "\020\053\023\ufffe\026\047\030\036\031\054\035\044\043" +
    "\061\055\040\065\066\066\065\067\052\070\032\071\063" +
    "\001\002\000\066\003\uffc7\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\023\uffc7\026\uffc7\030\uffc7\031" +
    "\uffc7\035\uffc7\043\uffc7\055\uffc7\065\uffc7\066\uffc7\067\uffc7" +
    "\070\uffc7\071\uffc7\001\002\000\004\023\221\001\002\000" +
    "\066\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\023\uffc6\026\uffc6\030\uffc6\031\uffc6\035\uffc6" +
    "\043\uffc6\055\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071" +
    "\uffc6\001\002\000\006\014\uffc5\023\uffc5\001\002\000\026" +
    "\011\050\012\062\035\044\043\061\055\040\065\075\066" +
    "\065\067\052\070\032\071\063\001\002\000\034\034\107" +
    "\035\115\036\113\037\110\044\225\047\105\050\103\051" +
    "\104\052\112\053\106\054\102\056\114\057\101\001\002" +
    "\000\066\003\051\004\021\005\015\006\014\007\011\010" +
    "\012\011\050\012\062\013\045\014\ufffe\015\ufffe\016\056" +
    "\017\035\020\053\023\ufffe\026\047\030\036\031\054\035" +
    "\044\043\061\055\040\065\066\066\065\067\052\070\032" +
    "\071\063\001\002\000\010\014\uffc3\015\uffc3\023\uffc3\001" +
    "\002\000\004\023\230\001\002\000\066\003\uffc8\004\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\023\uffc8" +
    "\026\uffc8\030\uffc8\031\uffc8\035\uffc8\043\uffc8\055\uffc8\065" +
    "\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\001\002\000\124" +
    "\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\023\uffd6\026\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\043\uffd6\044\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\065\uffd6\066\uffd6\067\uffd6" +
    "\070\uffd6\071\uffd6\001\002\000\114\003\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\023\ufff5\026" +
    "\ufff5\030\ufff5\031\ufff5\034\107\035\115\036\113\037\110" +
    "\043\ufff5\047\105\050\103\051\104\052\112\053\106\054" +
    "\102\055\ufff5\056\114\057\101\065\ufff5\066\ufff5\067\ufff5" +
    "\070\ufff5\071\ufff5\001\002\000\016\004\021\005\015\006" +
    "\014\007\011\010\012\065\150\001\002\000\004\033\237" +
    "\001\002\000\004\033\uffb2\001\002\000\004\033\uffb3\001" +
    "\002\000\026\011\050\012\062\035\044\043\061\055\040" +
    "\065\075\066\065\067\052\070\032\071\063\001\002\000" +
    "\034\033\241\034\107\035\115\036\113\037\110\047\105" +
    "\050\103\051\104\052\112\053\106\054\102\056\114\057" +
    "\101\001\002\000\026\011\050\012\062\035\044\043\061" +
    "\055\040\065\066\066\065\067\052\070\032\071\063\001" +
    "\002\000\034\034\107\035\115\036\113\037\110\044\247" +
    "\047\105\050\103\051\104\052\112\053\106\054\102\056" +
    "\114\057\101\001\002\000\004\044\244\001\002\000\062" +
    "\003\051\004\021\005\015\006\014\007\011\010\012\011" +
    "\050\012\062\013\045\016\056\017\035\020\053\023\ufffe" +
    "\026\047\030\036\031\054\035\044\043\061\055\040\065" +
    "\066\066\065\067\052\070\032\071\063\001\002\000\004" +
    "\023\246\001\002\000\066\003\uffb0\004\uffb0\005\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\023\uffb0\026\uffb0\030" +
    "\uffb0\031\uffb0\035\uffb0\043\uffb0\055\uffb0\065\uffb0\066\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\001\002\000\062\003\051\004" +
    "\021\005\015\006\014\007\011\010\012\011\050\012\062" +
    "\013\045\016\056\017\035\020\053\023\ufffe\026\047\030" +
    "\036\031\054\035\044\043\061\055\040\065\066\066\065" +
    "\067\052\070\032\071\063\001\002\000\004\023\251\001" +
    "\002\000\066\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\023\uffb1\026\uffb1\030\uffb1\031\uffb1" +
    "\035\uffb1\043\uffb1\055\uffb1\065\uffb1\066\uffb1\067\uffb1\070" +
    "\uffb1\071\uffb1\001\002\000\006\002\uffaa\025\uffaa\001\002" +
    "\000\014\004\021\005\015\006\014\007\011\010\012\001" +
    "\002\000\004\046\uffbd\001\002\000\006\032\uffbb\046\uffbb" +
    "\001\002\000\004\023\257\001\002\000\006\002\uffab\025" +
    "\uffab\001\002\000\004\045\261\001\002\000\016\004\021" +
    "\005\015\006\014\007\011\010\012\046\262\001\002\000" +
    "\062\003\051\004\021\005\015\006\014\007\011\010\012" +
    "\011\050\012\062\013\045\016\056\017\035\020\053\023" +
    "\ufffe\026\047\030\036\031\054\035\044\043\061\055\040" +
    "\065\066\066\065\067\052\070\032\071\063\001\002\000" +
    "\004\046\264\001\002\000\062\003\051\004\021\005\015" +
    "\006\014\007\011\010\012\011\050\012\062\013\045\016" +
    "\056\017\035\020\053\023\ufffe\026\047\030\036\031\054" +
    "\035\044\043\061\055\040\065\066\066\065\067\052\070" +
    "\032\071\063\001\002\000\004\023\266\001\002\000\006" +
    "\002\uffad\025\uffad\001\002\000\004\023\270\001\002\000" +
    "\006\002\uffac\025\uffac\001\002\000\004\045\272\001\002" +
    "\000\004\046\273\001\002\000\062\003\051\004\021\005" +
    "\015\006\014\007\011\010\012\011\050\012\062\013\045" +
    "\016\056\017\035\020\053\023\ufffe\026\047\030\036\031" +
    "\054\035\044\043\061\055\040\065\066\066\065\067\052" +
    "\070\032\071\063\001\002\000\004\023\275\001\002\000" +
    "\006\002\uffa9\025\uffa9\001\002\000\004\002\uffaf\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\010\002\003\033\004\034\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\275\034\005" +
    "\001\001\000\004\030\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\024\026\023\030\022\001\001\000\002" +
    "\001\001\000\040\003\255\004\045\005\063\006\026\007" +
    "\027\010\056\011\030\012\054\013\033\017\040\022\041" +
    "\024\042\030\066\032\036\035\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\032" +
    "\004\045\005\063\006\026\007\027\010\056\011\030\012" +
    "\054\013\033\017\040\022\041\024\042\030\066\032\036" +
    "\035\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\231\006\026\007" +
    "\027\010\056\011\030\035\057\001\001\000\002\001\001" +
    "\000\016\005\230\006\026\007\027\010\056\011\030\035" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\120\006\026\007\027\010\056\011" +
    "\030\035\057\001\001\000\002\001\001\000\040\003\203" +
    "\004\045\005\063\006\026\007\027\010\056\011\030\012" +
    "\054\013\033\017\040\022\041\024\042\030\066\032\036" +
    "\035\057\001\001\000\016\005\202\006\026\007\027\010" +
    "\056\011\030\035\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\160\006\026\007\027\010\056\011\030\035\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\151\006\026\007\027\010\056" +
    "\011\030\035\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\071\024\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\073\006\026" +
    "\007\027\010\056\011\030\035\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\077\006\026\007\027" +
    "\010\056\011\030\027\076\035\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\144\006\026\007\027" +
    "\010\056\011\030\035\057\001\001\000\016\005\143\006" +
    "\026\007\027\010\056\011\030\035\057\001\001\000\016" +
    "\005\142\006\026\007\027\010\056\011\030\035\057\001" +
    "\001\000\016\005\141\006\026\007\027\010\056\011\030" +
    "\035\057\001\001\000\016\005\140\006\026\007\027\010" +
    "\056\011\030\035\057\001\001\000\016\005\137\006\026" +
    "\007\027\010\056\011\030\035\057\001\001\000\016\005" +
    "\133\006\026\007\027\010\056\011\030\035\057\001\001" +
    "\000\016\005\130\006\026\007\027\010\056\011\030\035" +
    "\057\001\001\000\020\005\077\006\026\007\027\010\056" +
    "\011\030\027\127\035\057\001\001\000\016\005\126\006" +
    "\026\007\027\010\056\011\030\035\057\001\001\000\016" +
    "\005\123\006\026\007\027\010\056\011\030\035\057\001" +
    "\001\000\016\005\122\006\026\007\027\010\056\011\030" +
    "\035\057\001\001\000\016\005\115\006\026\007\027\010" +
    "\056\011\030\035\057\001\001\000\002\001\001\000\016" +
    "\005\121\006\026\007\027\010\056\011\030\035\057\001" +
    "\001\000\016\005\120\006\026\007\027\010\056\011\030" +
    "\035\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\125\006\026" +
    "\007\027\010\056\011\030\035\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\132\006\026\007\027\010\056\011\030\035" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\136\006\026\007\027\010\056\011" +
    "\030\035\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\150\024\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\154" +
    "\006\026\007\027\010\056\011\030\035\057\001\001\000" +
    "\002\001\001\000\040\003\156\004\045\005\063\006\026" +
    "\007\027\010\056\011\030\012\054\013\033\017\040\022" +
    "\041\024\042\030\066\032\036\035\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\162\006\026\007\027\010\056\011\030\035\057\001\001" +
    "\000\002\001\001\000\006\014\164\015\165\001\001\000" +
    "\002\001\001\000\006\014\200\015\165\001\001\000\020" +
    "\005\167\006\026\007\027\010\056\011\030\016\170\035" +
    "\057\001\001\000\002\001\001\000\040\003\174\004\045" +
    "\005\063\006\026\007\027\010\056\011\030\012\054\013" +
    "\033\017\040\022\041\024\042\030\066\032\036\035\057" +
    "\001\001\000\040\003\172\004\045\005\063\006\026\007" +
    "\027\010\056\011\030\012\054\013\033\017\040\022\041" +
    "\024\042\030\066\032\036\035\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\167\006\026\007\027\010\056\011\030\016" +
    "\177\035\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\205\006\026\007\027\010\056\011\030\035\057" +
    "\001\001\000\002\001\001\000\040\003\207\004\045\005" +
    "\063\006\026\007\027\010\056\011\030\012\054\013\033" +
    "\017\040\022\041\024\042\030\066\032\036\035\057\001" +
    "\001\000\006\020\213\021\212\001\001\000\040\003\226" +
    "\004\045\005\063\006\026\007\027\010\056\011\030\012" +
    "\054\013\033\017\040\022\041\024\042\030\066\032\036" +
    "\035\057\001\001\000\002\001\001\000\006\020\221\021" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\217\004\045\005\063\006\026\007\027\010\056\011" +
    "\030\012\054\013\033\017\040\022\041\024\042\030\066" +
    "\032\036\035\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\223" +
    "\006\026\007\027\010\056\011\030\035\057\001\001\000" +
    "\002\001\001\000\040\003\225\004\045\005\063\006\026" +
    "\007\027\010\056\011\030\012\054\013\033\017\040\022" +
    "\041\024\042\030\066\032\036\035\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\235\024\234\030\066" +
    "\031\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\237\006\026\007\027\010\056" +
    "\011\030\035\057\001\001\000\002\001\001\000\020\005" +
    "\241\006\026\007\027\010\056\011\030\024\242\035\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\244\004\045\005\063\006\026\007\027\010\056\011\030" +
    "\012\054\013\033\017\040\022\041\024\042\030\066\032" +
    "\036\035\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\247\004\045\005\063\006\026\007\027\010" +
    "\056\011\030\012\054\013\033\017\040\022\041\024\042" +
    "\030\066\032\036\035\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\253\026\023" +
    "\030\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\262\026\023\030\022\001\001\000\040\003\266\004" +
    "\045\005\063\006\026\007\027\010\056\011\030\012\054" +
    "\013\033\017\040\022\041\024\042\030\066\032\036\035" +
    "\057\001\001\000\002\001\001\000\040\003\264\004\045" +
    "\005\063\006\026\007\027\010\056\011\030\012\054\013" +
    "\033\017\040\022\041\024\042\030\066\032\036\035\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\273\004\045\005\063\006\026\007\027\010" +
    "\056\011\030\012\054\013\033\017\040\022\041\024\042" +
    "\030\066\032\036\035\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public boolean syntaxErrors;

  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= function_declarations 
            {
              Program RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<FunctionDeclarations> fds = (List<FunctionDeclarations>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statement statements 
            {
              List<Statements> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statements> ss = (List<Statements>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= 
            {
              List<Statements> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= if_statement 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= while_statement 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= for_statement 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= switch_statement 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= variable_declaration 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= variable_declarator 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= RETURN exp 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= READ exp 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= WRITE exp 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= exp 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= error 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= numeric_exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NumericExp e = (NumericExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= boolean_exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BooleanExp e = (BooleanExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= logical_exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LogicalExp e = (LogicalExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= literal_exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LiteralExp e = (LiteralExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= function_call 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall e = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= IDENTIFIER 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Identifier(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= LPAR exp RPAR 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LParExpRPar(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // literal_exp ::= INTNUMBER 
            {
              LiteralExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literal_exp ::= DOUBLENUMBER 
            {
              LiteralExp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DoubleLiteral(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // literal_exp ::= STRINGCONTENT 
            {
              LiteralExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteral(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // literal_exp ::= CHARCONTENT 
            {
              LiteralExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharLiteral(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // numeric_exp ::= MIN exp 
            {
              NumericExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Umin(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // numeric_exp ::= exp ADD ADD 
            {
              NumericExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Upinc(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // numeric_exp ::= exp MIN MIN 
            {
              NumericExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Updec(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // numeric_exp ::= exp ADD exp 
            {
              NumericExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Add(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // numeric_exp ::= exp ADD ASSIGN exp 
            {
              NumericExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AddAssign(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // numeric_exp ::= exp MIN exp 
            {
              NumericExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Min(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // numeric_exp ::= exp MIN ASSIGN exp 
            {
              NumericExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinAssign(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // numeric_exp ::= exp MUL exp 
            {
              NumericExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Mul(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // numeric_exp ::= exp MUL ASSIGN exp 
            {
              NumericExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MulAssign(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // numeric_exp ::= exp DIV exp 
            {
              NumericExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Div(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // numeric_exp ::= exp DIV ASSIGN exp 
            {
              NumericExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivAssign(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric_exp",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // boolean_exp ::= exp GREATER exp 
            {
              BooleanExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Greater(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // boolean_exp ::= exp LESS exp 
            {
              BooleanExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Less(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // boolean_exp ::= exp GREATEREQ exp 
            {
              BooleanExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterEq(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // boolean_exp ::= exp LESSEQ exp 
            {
              BooleanExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessEq(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // boolean_exp ::= exp EQU exp 
            {
              BooleanExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Equ(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // boolean_exp ::= exp NEQ exp 
            {
              BooleanExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Neq(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_exp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // logical_exp ::= NOT exp 
            {
              LogicalExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // logical_exp ::= exp OR exp 
            {
              LogicalExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Or(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // logical_exp ::= exp AND exp 
            {
              LogicalExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // logical_exp ::= TRUE 
            {
              LogicalExp RESULT =null;
		 RESULT = new True(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logical_exp ::= FALSE 
            {
              LogicalExp RESULT =null;
		 RESULT = new False(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // while_statement ::= WHILE LPAR exp RPAR statements END 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // switch_statement ::= SWITCH LPAR exp RPAR switch_case_statements END 
            {
              SwitchStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // switch_case_statements ::= switch_case_statement switch_case_statements 
            {
              SwitchCaseStatements RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_case_statements",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // switch_case_statements ::= switch_case_statement 
            {
              SwitchCaseStatements RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_case_statements",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // switch_case_statement ::= CASE switch_case_exp_list statements END 
            {
              SwitchCaseStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_case_statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // switch_case_statement ::= CASE DEFAULT statements END 
            {
              SwitchCaseStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_case_statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // switch_case_exp_list ::= exp COMMA switch_case_exp_list 
            {
              SwitchCaseExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_case_exp_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // switch_case_exp_list ::= exp 
            {
              SwitchCaseExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_case_exp_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // if_statement ::= IF LPAR exp RPAR statements END 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if_statement ::= IF LPAR exp RPAR statements ELSE statements END 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if_statement ::= IF LPAR exp RPAR statements else_if_statements END 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if_statement ::= IF LPAR exp RPAR statements else_if_statements ELSE statements END 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else_if_statements ::= else_if_statement else_if_statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_if_statements",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // else_if_statements ::= else_if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_if_statements",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // else_if_statement ::= ELSEIF LPAR exp RPAR statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_if_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable_declaration ::= type variable_declarators 
            {
              VariableDeclaration RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable_declaration ::= type IDENTIFIER 
            {
              VariableDeclaration RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable_declarators ::= variable_declarator COMMA variable_declarators 
            {
              List<VariableDeclarators> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarators",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variable_declarators ::= variable_declarator 
            {
              List<VariableDeclarators> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarators",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // variable_declarator ::= IDENTIFIER ASSIGN exp 
            {
              VariableDeclarator RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarator",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parameters ::= parameter COMMA parameters 
            {
              List<Parameters> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parameters ::= parameter 
            {
              List<Parameters> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parameter ::= type IDENTIFIER 
            {
              Parameter RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arguments ::= exp COMMA arguments 
            {
              List<Arguments> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arguments ::= exp 
            {
              List<Arguments> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type ::= INTEGER 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type ::= CHAR 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // type ::= BOOLEAN 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // type ::= DOUBLE 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // type ::= STRING 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // for_init ::= variable_declaration 
            {
              ForInit RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_init",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for_init ::= variable_declarator 
            {
              ForInit RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_init",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // for_statement ::= FOR LPAR for_init SEMICOLON exp SEMICOLON exp RPAR statements END 
            {
              For RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for_statement ::= FOR LPAR for_init SEMICOLON exp SEMICOLON variable_declarator RPAR statements END 
            {
              For RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // function_declarations ::= function_declaration function_declarations 
            {
              List<FunctionDeclarations> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declarations",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // function_declarations ::= function_declaration 
            {
              List<FunctionDeclarations> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declarations",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // function_declaration ::= FUNCTION type IDENTIFIER LBRACK parameters RBRACK statements END 
            {
              FunctionDeclaration RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // function_declaration ::= FUNCTION type IDENTIFIER LBRACK RBRACK statements END 
            {
              FunctionDeclaration RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // function_declaration ::= FUNCTION VOID IDENTIFIER LBRACK RBRACK statements END 
            {
              FunctionDeclaration RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function_declaration ::= FUNCTION VOID IDENTIFIER LBRACK parameters RBRACK statements END 
            {
              FunctionDeclaration RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // function_declaration ::= FUNCTION INTEGER MAIN LBRACK RBRACK statements END 
            {
              FunctionDeclaration RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // function_call ::= IDENTIFIER LBRACK arguments RBRACK 
            {
              FunctionCall RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
